#!/usr/bin/env node
// Ghost Configuration for Heroku

const fs = require('fs');
const path = require('path');
const url = require('url');

const envValues = require('./common/env-values');
const appRoot = path.join(__dirname, '..');

const getMysqlConfig = connectionUrl => {
  if (connectionUrl === null) {
    return {};
  }

  const dbConfig = url.parse(connectionUrl);
  if (dbConfig === null) {
    return {};
  }

  const dbAuth = dbConfig.auth ? dbConfig.auth.split(':') : [];
  const dbUser = dbAuth[0];
  const dbPassword = dbAuth[1];

  let dbName;
  if (dbConfig.pathname === null) {
    dbName = 'ghost';
  } else {
    dbName = dbConfig.pathname.split('/')[1];
  }

  const dbConnection = {
    host: dbConfig.hostname,
    port: dbConfig.port || '3306',
    user: dbUser,
    password: dbPassword,
    database: dbName
  };
  return dbConnection;
};

const createConfig = () => {
  let fileStorage;
  let storage;

  if (!!process.env.S3_ACCESS_KEY_ID) {
    fileStorage = true;
    storage = {
      active: 's3',
      s3: {
        accessKeyId: process.env.S3_ACCESS_KEY_ID,
        secretAccessKey: process.env.S3_ACCESS_SECRET_KEY,
        bucket: process.env.S3_BUCKET_NAME,
        region: process.env.S3_BUCKET_REGION,
        assetHost: process.env.S3_ASSET_HOST_URL
      }
    };
  } else if (!!process.env.BUCKETEER_AWS_ACCESS_KEY_ID) {
    fileStorage = true;
    storage = {
      active: 's3',
      s3: {
        accessKeyId: process.env.BUCKETEER_AWS_ACCESS_KEY_ID,
        secretAccessKey: process.env.BUCKETEER_AWS_SECRET_ACCESS_KEY,
        bucket: process.env.BUCKETEER_BUCKET_NAME,
        region: process.env.S3_BUCKET_REGION,
        assetHost: process.env.S3_ASSET_HOST_URL
      }
    };
  } else {
    fileStorage = false;
    storage = {};
  }

  config = {
    url: process.env.PUBLIC_URL,
    logging: {
      level: 'info',
      transports: ['stdout']
    },
    mail: {
      transport: 'SMTP',
      options: {
        service: 'Mailgun',
        auth: {
          user: process.env.MAILGUN_SMTP_LOGIN,
          pass: process.env.MAILGUN_SMTP_PASSWORD
        }
      }
    },
    fileStorage,
    storage,
    database: {
      client: 'mysql',
      connection: getMysqlConfig(envValues.mysqlDatabaseUrl),
      pool: { min: 0, max: 5 },
      debug: false
    },
    server: {
      host: '0.0.0.0',
      port: process.env.PORT
    },
    paths: {
      contentPath: path.join(appRoot, '/content/')
    }
  };

  return config;
};

const configContents = JSON.stringify(createConfig(), null, 2);
fs.writeFileSync(path.join(appRoot, 'config.production.json'), configContents);
