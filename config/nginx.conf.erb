daemon off;
# Heroku dynos have at least 4 cores.
worker_processes <%= ENV['NGINX_WORKERS'] || 4 %>;

events {
  use epoll;
  accept_mutex on;
  worker_connections 1024;
}

http {
  gzip on;
  gzip_comp_level 3;
  gzip_min_length 150;
  gzip_proxied any;
  gzip_types text/plain text/css text/json text/javascript
    application/javascript application/x-javascript application/json
    application/rss+xml application/vnd.ms-fontobject application/x-font-ttf
    application/xml font/opentype image/svg+xml text/xml;

  server_tokens off;

  log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
  access_log logs/nginx/access.log l2met;
  error_log logs/nginx/error.log;

  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  # Must read the body in 5 seconds.
  client_body_timeout <%= ENV['NGINX_CLIENT_BODY_TIMEOUT'] || 5 %>;

  upstream app_server {
    server unix:/tmp/nginx.socket fail_timeout=0;
  }

  server {
    listen <%= ENV["PORT"] || 3000 %>;
    server_name _;
    keepalive_timeout 5;
    client_max_body_size <%= ENV['NGINX_CLIENT_MAX_BODY_SIZE'] || 1 %>M;

    # root /app; # path to your app

    # location /nginx_status {
    #   # Turn on nginx stats
    #   stub_status on;

    #   # I do not need logs for stats
    #   access_log   off;

    #   # Security: Only allow access from 192.168.1.100 IP #
    #   # allow 192.168.1.100;

    #   # Send rest of the world to /dev/null #
    #   # deny all;
    # }

    location / {
      proxy_set_header  X-Real-IP $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      proxy_redirect    off;
      proxy_pass        http://app_server;
    }

    location /blog {
      auth_request      /oauth/token/info;
      auth_request_set  $auth_status $upstream_status;
      auth_request_set  $auth_cookie $upstream_http_set_cookie;

      # proxy_set_header  Host www.wework.com;
      # proxy_set_header  X-Real-IP $remote_addr;
      # proxy_redirect    off;
      # proxy_pass        https://www.wework.com;
    }

    # https://developers.shopware.com/blog/2015/03/02/sso-with-nginx-authrequest-module/
    # Let's handle the redirect in case the the SSO API
    # returns http code 401. With the error_page directive
    error_page 401 = @error401;
    location @error401 {
      return 302 /auth/id;
    }

    # Now we have to somehow transport the client's authorization
    # token from one system to another. After being authorized at
    # id.wework.com, the user gets a cookie containing the auth token.
    location = /oauth/token/info {
      internal;
      proxy_pass              https://id-staging.wework.com;
      proxy_pass_request_body off;
      proxy_set_header        Content-Length "";
      proxy_set_header        X-Original-URI $request_uri;
      proxy_set_header        Host $http_host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      # The cookie is set to `.wework.com` so our site an also access the token.
      # All we have to do now it to pass the token from the cookie to the auth backend.

      # We match the token from the users cookie, followed by a proxy_set_header to
      # pass the token to the backend.
      if ($http_cookie ~* "ID_auth_token=([^;]+)(?:;|$)") {
        set $token "$1";
      }

      proxy_set_header Authorization "Bearer $token";
    }
  }
}
